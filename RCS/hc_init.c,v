head	1.14;
access;
symbols;
locks
	becker:1.14; strict;
comment	@ * @;


1.14
date	2006.03.21.08.07.18;	author becker;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.22.01.11.34;	author becker;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.20.05.18.12;	author becker;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.20.05.09.42;	author becker;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.01.01.25.35;	author becker;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.24.02.09.00;	author becker;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.06.00.38.36;	author becker;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.30.23.52.04;	author becker;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.02.00.14.44;	author becker;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.01.01.25.28;	author becker;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.24.01.02.13;	author becker;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.23.01.06.56;	author becker;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.21.01.16.31;	author becker;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.20.23.17.52;	author becker;	state Exp;
branches;
next	;


desc
@@


1.14
log
@fixed a problem with the density structure initialization
@
text
@#include "hc.h"
/* 
   general routines dealing with the hager & Connell implementation

  
   $Id: hc_init.c,v 1.13 2006/01/22 01:11:34 becker Exp becker $

*/

/* first, call this routine with a blank **hc */
void hc_struc_init(struct hcs **hc)
{
  
  *hc = (struct hcs *)calloc(1,sizeof(struct hcs *));
  if(!(*hc))
    HC_MEMERROR("hc_struc_init: hc");
  /* 
     assign NULL pointers to allow reallocating 
  */
  (*hc)->r = (*hc)->visc = (*hc)->rvisc = 
    (*hc)->dfact = (*hc)->rden = NULL;
  (*hc)->rpb = (*hc)->fpb= NULL;
  (*hc)->dens_anom = (*hc)->geoid = NULL; /* expansions */
  (*hc)->plm = NULL;
  (*hc)->prem_init = FALSE;
  (*hc)->print_pt_sol = FALSE;
  /* 

  filenames
  
  */
  strncpy((*hc)->visc_filename,HC_VISC_FILE,HC_CHAR_LENGTH);
  strncpy((*hc)->dens_filename,HC_DENS_SH_FILE,HC_CHAR_LENGTH);
  strncpy((*hc)->pvel_filename,HC_PVEL_FILE,HC_CHAR_LENGTH);
}
/* 

initialize all variables

sh_type: type of expansion storage/spherical haronics scheme to use

compressible: flag for ddensity factors and polsol operation

vel_bc_zero: if true, will set all surface velocities to zero


free-slip: free_slip TRUE
no-slip  : free_slip FALSE vel_bc_zero: TRUE
platevel : free_slip FALSE vel_bc_zero: FALSE


*/
void hc_init(struct hcs *hc,int sh_type,
	     hc_boolean compressible,
	     hc_boolean free_slip,
	     hc_boolean vel_bc_zero,
	     HC_PREC dens_anom_scale,
	     hc_boolean verbose)
{
  int dummy=0;
  /* mechanical boundary condition */
  hc->free_slip = free_slip;
  /* 
     set the default expansion type, input expansions will be 
     converted 
  */
  hc->sh_type = sh_type;
  /* 
     start by reading in physical constants and PREM model, if compressible
  */
  hc_init_constants(hc,dens_anom_scale,PREM_MODEL_FILE,verbose);
  /* 
     initialize viscosity structure from file
  */
  hc_assign_viscosity(hc,HC_INIT_FROM_FILE,hc->visc_filename,verbose);
  if(vel_bc_zero){
    /* no slip (zero velocity) surface boundary conditions */
    if(free_slip)
      HC_ERROR("hc_init","vel_bc_zero and free_slip doesn't make sense");
    /* read in the densities */
    hc_assign_density(hc,compressible,HC_INIT_FROM_FILE,
		      hc->dens_filename,-1,FALSE,FALSE,verbose);
    /* assign all zeroes up to the lmax of the density expansion */
    hc_assign_plate_velocities(hc,HC_INIT_FROM_FILE,
			       hc->pvel_filename,vel_bc_zero,
			       hc->dens_anom[0].lmax,FALSE,verbose);
  }else{
    /* presribed surface velocities */
    if(!free_slip){
      /* read in velocities, which will determine the solution lmax */
      hc_assign_plate_velocities(hc,HC_INIT_FROM_FILE,
				 hc->pvel_filename,vel_bc_zero,
				 dummy,FALSE,verbose);
      hc_assign_density(hc,compressible,HC_INIT_FROM_FILE,
			hc->dens_filename,hc->pvel[0].lmax,FALSE,FALSE,verbose);
    }else{
      if(verbose)
	fprintf(stderr,"hc_init: initializing for free-slip\n");
      /* read in the density fields */
      hc_assign_density(hc,compressible,HC_INIT_FROM_FILE,
			hc->dens_filename,-1,FALSE,FALSE,verbose);
    }
  }
  /* 
     phase boundaries, if any 
  */
  hc_init_phase_boundaries(hc,0,verbose);
  /*  */
  hc->save_solution = TRUE;	/* (don')t save the propagator
				   matrices in hc_polsol and the
				   poloidal/toroidal solutions
				*/
  hc->initialized = TRUE;
}
/* 

   some of those numbers might be a bit funny, but leave them like
   this for now for backward compatibility.

*/
void hc_init_constants(struct hcs *hc, HC_PREC dens_anom_scale,
		       char *prem_filename,hc_boolean verbose)
{
  static hc_boolean init=FALSE;
  if(init)
    HC_ERROR("hc_init_constants","why would you call this routine twice?")
  if(!hc->prem_init){
    /* PREM constants */
    prem_read_model(prem_filename,hc->prem,verbose);
    hc->prem_init = TRUE;
  }
  /* 
     density scale 
  */
  hc->dens_scale[0] = dens_anom_scale;
  /* 
     constants
  */
  hc->timesc = HC_TIMESCALE_YR;		/* timescale [yr]*/
  hc->visnor = 1e21;		/* normalizing viscosity [Pas]*/
  hc->gacc = 10.0; 		/* gravitational acceleration [m/s2]*/
  hc->g = 6.672e-11;		/* gravitational constant [Nm2/kg2]*/
  hc->re = HC_RE_KM*1e3;	/* raadius of Earth  [m]*/
  hc->secyr = 3.1556926e7;	/* seconds/year  */
  hc->avg_den_mantle = 4.4488e3;/* average density in mantle [kg/m^3] */
  hc->avg_den_core = 9.90344e3;	/* same for core */
  /* velocity scale if input is in [cm/yr], 
     works out to be ~0.11 */
  hc->vel_scale = hc->re*PIOVERONEEIGHTY/hc->timesc;
  init = TRUE;
}

/* 
   
     handle command line  parameters
     
     visc_filename[] needs to be [HC_CHAR_LENGTH]

 */
void hc_handle_command_line(int argc, char **argv,
			    HC_PREC *dens_anom_scale,
			    hc_boolean *free_slip, 
			    char *visc_filename,
			    hc_boolean *print_pt_sol,
			    hc_boolean *verbose)
{
  int i;
  for(i=1;i < argc;i++){
    if(strcmp(argv[i],"-h")==0 || strcmp(argv[i],"-?")==0){// help
      /* 
	 help paghe
      */
      fprintf(stderr,"%s - perform Hager & O'Connell flow computation\n\n",
	      argv[0]);
      fprintf(stderr,"options:\n\n");
      fprintf(stderr,"-ds\t\tdensity scaling (%g)\n",
	      *dens_anom_scale);
      fprintf(stderr,"-fs\t\tperform free slip computation, else no slip or plates (%s)\n",
	      hc_name_boolean(*free_slip));
      fprintf(stderr,"-pptsol\t\tprint pol[6] and tor[2] solution vectors\n");
      fprintf(stderr,"-vf\tname\tset viscosity structure filename to name (%s)\n",
	      visc_filename);
      fprintf(stderr,"-v\t-vv\t-vvv: verbosity levels (%i)\n",
	      (int)(*verbose));
      fprintf(stderr,"\n\n");
      exit(-1);
    }else if(strcmp(argv[i],"-ds")==0){	/* density anomaly scaling factor */
      hc_advance_argument(&i,argc,argv);
      sscanf(argv[i],HC_FLT_FORMAT,dens_anom_scale);
    }else if(strcmp(argv[i],"-fs")==0){	/* free slip flag */
      hc_toggle_boolean(free_slip);
    }else if(strcmp(argv[i],"-pptsol")==0){	/* print
						   poloidal/toroidal
						   solution
						   parameters */
      hc_toggle_boolean(print_pt_sol);
    }else if(strcmp(argv[i],"-vf")==0){ /* viscosity filename */
      hc_advance_argument(&i,argc,argv);
      strncpy(visc_filename,argv[i],HC_CHAR_LENGTH);
    }else if(strcmp(argv[i],"-v")==0){	/* verbosities */
      *verbose = 1;
    }else if(strcmp(argv[i],"-vv")==0){	/* verbosities */
      *verbose = 2;
    }else if(strcmp(argv[i],"-vvv")==0){	
      *verbose = 3;
    }else{
      fprintf(stderr,"%s: can not use parameter %s, use -h for help page\n",
	      argv[0],argv[i]);
      exit(-1);
    }
  }
}
/* 

assign viscosity structure

mode == 0

read in a viscosity structure with layers of constant viscosity in
format

r visc 

where r is non-dim radius and visc non-dim viscosity, r has to be
ascending

*/
void hc_assign_viscosity(struct hcs *hc,int mode,char filename[HC_CHAR_LENGTH],
			 hc_boolean verbose)
{
  FILE *in;
  char fstring[100];
  HC_PREC mean;
  static hc_boolean init=FALSE;
  switch(mode){
  case HC_INIT_FROM_FILE:		
    /* 
       
       init from file part 
    
    */
    if(init)
      HC_ERROR("hc_assign_viscosity","viscosity already read from file, really read again?");
    /* 
       read viscosity structure from file 

       format:

       r[non-dim] visc[non-dim]

       from bottom to top
    */
    in = hc_open(filename,"r","hc_assign_viscosity");
    hc_vecrealloc(&hc->rvisc,1,"hc_assign_viscosity");
    hc_vecrealloc(&hc->visc,1,"hc_assign_viscosity");
    hc->nvis = 0;mean = 0.0;
    /* read sscanf string */
    hc_get_flt_frmt_string(fstring,2,FALSE);
    /* start read loop  */
    while(fscanf(in,"%lf %lf",
		 (hc->rvisc+hc->nvis),(hc->visc+hc->nvis))==2){
      mean += hc->visc[hc->nvis];
      if(hc->nvis){
	if(hc->rvisc[hc->nvis] < hc->rvisc[hc->nvis-1]){
	  fprintf(stderr,"hc_assign_viscosity: error: radius has to be ascing, entry %i (%g) smaller than last (%g)\n",
		  hc->nvis+1,hc->rvisc[hc->nvis],hc->rvisc[hc->nvis-1]);
	  exit(-1);
	}
      }
      hc->nvis++;
      hc_vecrealloc(&hc->rvisc,hc->nvis+1,"hc_assign_viscosity");
      hc_vecrealloc(&hc->visc,hc->nvis+1,"hc_assign_viscosity");
    }
    fclose(in);
    mean /= hc->nvis;
    if(verbose){
      fprintf(stderr,"hc_assign_viscosity: read %i layers of non-dimensionalized viscosities from %s\n",
	      hc->nvis,filename);
      fprintf(stderr,"hc_assign_viscosity: rough estimate of mean viscosity %g Pas\n",
	      mean * hc->visnor);
    }
    break;
  default:
    HC_ERROR("hc_assign_viscosity","mode undefined");
    break;
  }
  init = TRUE;
}
/* 

assign/initialize the density anomalies and density factors

if mode==0: expects spherical harmonics of density anomalies [%] with
            respect to the 1-D reference model (PREM) given in SH
            format on decreasing depth levels in [km]
	    

	    spherical harmonics are real, fully normalized as in 
	    Dahlen & Tromp p. 859


this routine assigns the inho density radii, and the total (nrad=inho)+2
radii 

furthermore, the dfact factors are assigned as well

set  density_in_binary to TRUE, if expansion given in binary

nominal_lmax: -1: the max order of the density expansion will either
                  determine the lmax of the solution (free-slip, or vel_bc_zero) or 
		  will have to be the same as the plate expansion lmax (!free_slip && !vel_bc_zero)
              else: will zero out all entries > nominal_lmax

*/
void hc_assign_density(struct hcs *hc,
		       hc_boolean compressible,int mode,
		       char *filename,int nominal_lmax,
		       hc_boolean layer_structure_changed,
		       hc_boolean density_in_binary,
		       hc_boolean verbose)
{
  FILE *in;
  int type,lmax,shps,ilayer,nset,ivec,i,j;
  HC_PREC *dtop,*dbot,zlabel,dens_scale[1],rho0;
  hc_boolean reported = FALSE;
  static HC_PREC local_dens_fac = .01;	/* this factor will be multiplied with 
					   the hc->dens_fac factor to arrive at
					   fractional anomalies from input. set to 
					   0.01 for percent input, for instance
					*/
  static hc_boolean init=FALSE;
  hc->compressible = compressible;

  if(init)			/* clear old expansions, if 
				   already initialized */
    sh_free_expansion(hc->dens_anom,hc->inho);
  /* get PREM model, if not initialized */
  if(!hc->prem_init)
    HC_ERROR("hc_assign_density","assign 1-D reference model (PREM) first");
  switch(mode){
  case HC_INIT_FROM_FILE:
    if(init)
      HC_ERROR("hc_assign_density","really read dens anomalies again from file?");

    /* 
       
    read in density anomalies in spherical harmonics format for
    different layers from file. 

    this assumes that we are reading in anomalies in percent
    
    */
    in = hc_open(filename,"r","hc_assign_density");
    if(verbose)
      fprintf(stderr,"hc_assign_density: reading density anomalies in [%%] from %s, scaling by %g\n",
	      filename,hc->dens_scale[0]);
    hc->inho = 0;		/* counter for density layers */
    /* get one density expansion */
    hc_get_blank_expansions(&hc->dens_anom,1,0,"hc_assign_density");
    /* 
       read all layes as spherical harmonics assuming real Dahlen & Tromp 
       (physical) normalization

    */
    while(sh_read_parameters(&type,&lmax,&shps,&ilayer, &nset,
			     &zlabel,&ivec,in,FALSE,density_in_binary,
			     verbose)){
      if((verbose)&&(!reported)){
	if(nominal_lmax > lmax)
	  fprintf(stderr,"hc_assign_density: density lmax: %3i filling up to nominal lmax: %3i with zeroes\n",
		  lmax,nominal_lmax);
	if(nominal_lmax != -1){
	  fprintf(stderr,"hc_assign_density: density lmax: %3i limiting to lmax: %3i\n",
		  lmax,nominal_lmax);
	}else{
	  fprintf(stderr,"hc_assign_density: density lmax: %3i determines solution lmax\n",
		  lmax);
	}
	reported = TRUE;
      }
      /* 
	 do tests 
      */
      if((shps != 1)||(ivec))
	HC_ERROR("hc_assign_density","vector field read in but only scalar expansion expected");
      /* test and assign depth levels */
      hc->rden=(HC_PREC *)
	realloc(hc->rden,(1+hc->inho)*sizeof(HC_PREC));
      if(!hc->rden)
	HC_MEMERROR("hc_assign_density: rden");
      /* 
	 assign depth, this assumes that we are reading in depths [km]
      */
      hc->rden[hc->inho] = HC_ND_RADIUS(zlabel);
      /* 

      get reference density at this level

      */
      prem_get_rho(&rho0,hc->rden[hc->inho],hc->prem);
      /* 
	 general density (add additional depth dependence here)
      */
      dens_scale[0] = hc->dens_scale[0] * local_dens_fac * rho0;
      if(verbose >= 2)
	fprintf(stderr,"hc_assign_density: r: %11g anom scales: %11g x %11g x %11g = %11g\n",
		hc->rden[hc->inho],hc->dens_scale[0],
		local_dens_fac,rho0,dens_scale[0]);
      if(hc->inho){	
	/* 
	   check by comparison with previous expansion 
	*/
	if(nominal_lmax == -1)
	  if(lmax != hc->dens_anom[0].lmax)
	    HC_ERROR("hc_assign_density","lmax changed in file");
	if(hc->rden[hc->inho] <= hc->rden[hc->inho-1])
	  HC_ERROR("hc_assign_density","depth should decrease, radius increase (give z[km])");
      }
      /* 
	 make room for new expansion 
      */
      hc_get_blank_expansions(&hc->dens_anom,hc->inho+1,hc->inho,
			      "hc_assign_density");
      /* 
	 initialize expansion
      */
      sh_init_expansion((hc->dens_anom+hc->inho),
			(nominal_lmax > lmax) ? (nominal_lmax):(lmax),
			hc->sh_type,1,verbose);
      /* 
	 
	 read parameters and scale (put possible depth dependence of
	 scaling here)
	 
	 will assume input is in physical convention

      */
      sh_read_coefficients((hc->dens_anom+hc->inho),1,lmax,
			   in,density_in_binary,dens_scale,
			   verbose);
      hc->inho++;
    }
    if(hc->inho != nset)
      HC_ERROR("hc_assign_density","file mode: mismatch in number of layers");
    fclose(in);
    break;
  default:
    HC_ERROR("hc_assign_density","mode undefined");
    break;
  }
  if((!init)||(layer_structure_changed)){
    /* 
       
    assign the other radii, nrad + 2
    
    */
    hc->nrad = hc->inho;
    hc_vecrealloc(&hc->r,(2+hc->nrad),"hc_assign_density");
    hc->r[0] = HC_RCMB_ND;	/* CMB  */
    if(hc->rden[0] <= hc->r[0])
      HC_ERROR("hc_assign_density","first density layer has to be above internal CMD limit");
    for(i=0;i<hc->nrad;i++)	/* density layers */
      hc->r[i+1] = hc->rden[i];
    if(hc->rden[hc->nrad-1] >= 1.0)
      HC_ERROR("hc_assign_density","uppermost density layer has to be below surface");
    hc->r[hc->nrad+1] = 1.0;	/* surface */
    /* 

    assign the density jump factors

    */
    /* 
       since we have spherical harmonics at several layers, we assign 
       the layer thickness by picking the intermediate depths
    */
    hc_vecalloc(&dbot,hc->nrad,"hc_assign_density");
    hc_vecalloc(&dtop,hc->nrad,"hc_assign_density");
    //    top boundaries
    j = hc->nrad-1;
    for(i=0;i < j;i++)
      dtop[i] = 1.0 - (hc->rden[i+1] + hc->rden[i])/2.0;
    dtop[j] = 0.0; // top boundary
    //    bottom boundaries
    dbot[0] = 1.0 - HC_RCMB_ND;  // bottom boundary, ie. CMB 
    for(i=1;i < hc->nrad;i++)
      dbot[i] = dtop[i-1];
    /* 
       density layer thickness factors
    */
    hc_dvecrealloc(&hc->dfact,hc->nrad,"hc_assign_density");
    for(i=0;i<hc->nrad;i++){
      hc->dfact[i] = 1.0/hc->rden[i] *(dbot[i] - dtop[i]);
    }
    if(verbose)
      for(i=0;i < hc->nrad;i++)
	fprintf(stderr,"hc_assign_density: dens %3i: r: %8.6f df: %8.6f |rho|: %8.4f\n",
		i+1,hc->rden[i],hc->dfact[i],
		sqrt(sh_total_power((hc->dens_anom+i))));
    free(dbot);free(dtop);
  } /* end layer structure part */
  init = TRUE;
}
/* 

assign phase boundary jumps
input:

npb: number of phase boundaries

....



*/
void hc_init_phase_boundaries(struct hcs *hc, int npb,
			      hc_boolean verbose)
{

  hc->npb = npb;		/* no phase boundaries for now */
  if(hc->npb){
    HC_ERROR("hc_init_phase_boundaries","phase boundaries not implemented yet");
    hc_vecrealloc(&hc->rpb,hc->npb,"hc_init_phase_boundaries");
    hc_vecrealloc(&hc->fpb,hc->npb,"hc_init_phase_boundaries");
  }

}

/* 

read in plate velocities, 

vel_bc_zero: if true, will set all surface velocities to zero

lmax will only be referenced if all velocities are supposed to be set to zero

we expect velocities to be in cm/yr, convert to m/yr

*/

void hc_assign_plate_velocities(struct hcs *hc,int mode, 
				char *filename,
				hc_boolean vel_bc_zero,int lmax,
				hc_boolean pvel_in_binary,
				hc_boolean verbose)
{
  static hc_boolean init = FALSE;
  int type,shps,ilayer,nset,ivec;
  HC_PREC zlabel,vfac[2],t10[2],t11[2];
  FILE *in;
  /* scale to go from cm/yr to internal scale */
  vfac[0] = vfac[1] = hc->vel_scale;
  if(init)
    HC_ERROR("hc_assign_plate_velocities","what to do if called twice?");
  if(!vel_bc_zero){
    /* 

    velocities are NOT all zero


    */
    switch(mode){
    case HC_INIT_FROM_FILE:
      /* 
	 read velocities in pol/tor expansion format from file 
	 in units of HC_VELOCITY_FILE_FACTOR per year
      */
      if(verbose)
	fprintf(stderr,"hc_assign_plate_velocities: expecting [cm/yr] pol/tor from %s\n",
		filename);
      in = hc_open(filename,"r","hc_assign_plate_velocities");
      if(!sh_read_parameters(&type,&lmax,&shps,&ilayer, &nset,
			     &zlabel,&ivec,in,FALSE,
			     pvel_in_binary,verbose)){
	fprintf(stderr,"hc_assign_plate_velocities: read error file %s\n",
		filename);
	exit(-1);
      } /* check if we read in two sets of expansions */
      if(shps != 2){
	fprintf(stderr,"hc_assign_plate_velocities: two sets expected but found shps: %i in file %s\n",
		shps,filename);
	exit(-1);
      }
      if((nset > 1)||(fabs(zlabel) > 0.01)){
	fprintf(stderr,"hc_assign_plate_velocities: error: expected one layer at surface, but nset: %i z: %g\n",
		nset, zlabel);
	exit(-1);
      }
      /* 
	 initialize expansion 
      */
      sh_init_expansion((hc->pvel+0),lmax,hc->sh_type,1,verbose);
      sh_init_expansion((hc->pvel+1),lmax,hc->sh_type,1,verbose);
      /* 
	 read in expansions, convert to internal format from 
	 physical 
      */
      sh_read_coefficients(hc->pvel,shps,-1,in,pvel_in_binary,
			   vfac,verbose);
      fclose(in);
      /* 
	 scale by 1/sqrt(l(l+1))
      */
      if(hc->pvel[0].lmax > hc->lfac_init)
	hc_init_l_factors(hc,hc->pvel[0].lmax);
      sh_scale_expansion_l_factor((hc->pvel+0),hc->ilfac);
      sh_scale_expansion_l_factor((hc->pvel+1),hc->ilfac);
      /*  
	  check for net rotation
      */
      sh_get_coeff((hc->pvel+1),1,0,0,TRUE,t10);
      sh_get_coeff((hc->pvel+1),1,0,2,TRUE,t11);
      if(fabs(t10[0])+fabs(t11[0])+fabs(t11[1]) > 1.0e-7)
	fprintf(stderr,"\nhc_assign_plate_velocities: WARNING: toroidal A(1,0): %g A(1,1): %g B(1,1): %g\n\n",
		t10[0],t11[0],t11[1]);
      if(verbose)
	fprintf(stderr,"hc_assign_plate_velocities: read velocities, lmax %i: |pol|: %11g |tor|: %11g\n",
		lmax,sqrt(sh_total_power((hc->pvel+0))),sqrt(sh_total_power((hc->pvel+1))));
      break;
    default:
      HC_ERROR("hc_assign_plate_velocities","op mode undefined");
    }
  }else{
    /* 
       initialize with zeroes
    */
    if(init){
      sh_clear_alm(hc->pvel);
      sh_clear_alm((hc->pvel+1));
    }else{
      sh_init_expansion(hc->pvel,lmax,hc->sh_type, 
			1,verbose);
      sh_init_expansion((hc->pvel+1),lmax,hc->sh_type, 
			1,verbose);
    }
    if(verbose)
      fprintf(stderr,"hc_assign_plate_velocities: using no-slip surface BC, lmax %i\n",
	      lmax);
  }
  init = TRUE;
}
 
/* 

initialize an array with sqrt(l(l+1)) factors
from l=0 .. lmax+1

pass lfac initialized (say, as NULL)

*/
void hc_init_l_factors(struct hcs *hc, int lmax)
{
  int lmaxp1,l;
  lmaxp1 = lmax + 1;
  hc_vecrealloc(&hc->lfac,lmaxp1,"hc_init_l_factors");
  hc_vecrealloc(&hc->ilfac,lmaxp1,"hc_init_l_factors");
  /* maybe optimize later */
  hc->lfac[0] = 0.0;
  hc->ilfac[0] = 1.0;		/* shouldn't matter */
  for(l=1;l < lmaxp1;l++){
    hc->lfac[l] = sqrt((HC_PREC)l * ((HC_PREC)l + 1.0));
    hc->ilfac[l] = 1.0/hc->lfac[l];
  }
  hc->lfac_init = lmax;
}

/* 
   
reallocate new spherical harmonic expansion structures 
and initialize them with zeroes

input: 
expansion: expansion **
nold: number of old expansions
nnew: number of new expansions

*/
void hc_get_blank_expansions(struct sh_lms **expansion,
			     int nnew,int nold,
			     char *calling_sub)
{
  struct sh_lms *tmpzero;
  int ngrow;
  ngrow= nnew - nold;
  if(ngrow <= 0){
    fprintf(stderr,"hc_get_blank_expansions: error: ngrow needs to be > 0, ngrow: %i\n",
	    ngrow);
    fprintf(stderr,"hc_get_blank_expansions: was called from %s\n",
	    calling_sub);
    exit(-1);
  }
  /* 
     reallocate space 
  */
  *expansion  = (struct sh_lms *)
    realloc(*expansion,sizeof(struct sh_lms)*nnew);
  if(!(*expansion)){
    fprintf(stderr,"hc_get_blank_expansions: memory error: ngrow: %i\n",
	    nnew-nold);
    fprintf(stderr,"hc_get_blank_expansions: was called from %s\n",
	    calling_sub);
    exit(-1);
  }
  /* zero out new space */
  tmpzero  = (struct sh_lms *)calloc(ngrow,sizeof(struct sh_lms));
  if(!tmpzero)
    HC_MEMERROR("hc_get_blank_expansions: tmpzero");
  /* copy zeroes over */
  memcpy((*expansion+nold),tmpzero,ngrow*sizeof(struct sh_lms));
  free(tmpzero);
}
@


1.13
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.12 2004/12/20 05:18:12 becker Exp becker $
d358 2
a359 4
    hc->dens_anom = (struct sh_lms *)
      realloc(hc->dens_anom,sizeof(struct sh_lms));
    if(!hc->dens_anom)
      HC_MEMERROR("hc_assign_density: dens anom");
d422 2
a423 4
      hc->dens_anom = (struct sh_lms *)
	realloc(hc->dens_anom,(1+hc->inho)*sizeof(struct sh_lms));
      if(!hc->dens_anom)
	HC_MEMERROR("hc_assign_density");
d427 2
a428 1
      sh_init_expansion((hc->dens_anom+hc->inho),(nominal_lmax > lmax) ? (nominal_lmax):(lmax),
d665 46
@


1.12
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.11 2004/12/20 05:09:42 becker Exp becker $
d60 1
a60 1
  int dummy;
d184 1
a184 1
	      verbose);
@


1.11
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.10 2004/12/01 01:25:35 becker Exp becker $
d57 1
a57 1
	     HC_CPREC dens_anom_scale,
d121 1
a121 1
void hc_init_constants(struct hcs *hc, HC_CPREC dens_anom_scale,
d161 1
a161 1
			    HC_CPREC *dens_anom_scale,
d233 1
a233 1
  HC_CPREC mean;
d324 1
a324 1
  HC_CPREC *dtop,*dbot,zlabel,dens_scale[1],rho0;
d326 1
a326 1
  static HC_CPREC local_dens_fac = .01;	/* this factor will be multiplied with 
d389 2
a390 2
      hc->rden=(HC_CPREC *)
	realloc(hc->rden,(1+hc->inho)*sizeof(HC_CPREC));
d551 1
a551 1
  HC_CPREC zlabel,vfac[2],t10[2],t11[2];
d663 1
a663 1
    hc->lfac[l] = sqrt((HC_CPREC)l * ((HC_CPREC)l + 1.0));
@


1.10
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.9 2004/11/24 02:09:00 becker Exp becker $
d358 2
a359 2
    hc->dens_anom = (struct lms *)
      realloc(hc->dens_anom,sizeof(struct lms));
d424 2
a425 2
      hc->dens_anom = (struct lms *)
	realloc(hc->dens_anom,(1+hc->inho)*sizeof(struct lms));
@


1.9
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.8 2004/08/06 00:38:36 becker Exp becker $
d16 1
a16 1
    MEMERROR("hc_struc_init: hc");
d26 9
d57 1
a57 1
	     CPREC dens_anom_scale,
d75 1
a75 2
  hc_assign_viscosity(hc,HC_INIT_FROM_FILE,
		      HC_VISC_FILE,verbose);
d82 1
a82 1
		      HC_DENS_SH_FILE,FALSE,FALSE,verbose);
d85 1
a85 1
			       HC_PVEL_FILE,vel_bc_zero,
d90 1
a90 1
      /* read in velocities */
d92 1
a92 1
				 HC_PVEL_FILE,vel_bc_zero,
d94 2
d99 3
a102 3
    /* read in the density fields */
    hc_assign_density(hc,compressible,HC_INIT_FROM_FILE,
		      HC_DENS_SH_FILE,FALSE,FALSE,verbose);
d121 1
a121 1
void hc_init_constants(struct hcs *hc, CPREC dens_anom_scale,
d139 1
a139 1
  hc->timesc = 1e6;		/* timescale [yr]*/
d147 2
a148 1
  /* velocity scale if input is in [cm/yr], works out to be ~0.11 */
d153 60
a212 2


d228 1
a228 1
void hc_assign_viscosity(struct hcs *hc,int mode,char *filename,
d233 1
a233 1
  CPREC mean;
d309 5
d317 1
a317 1
		       char *filename,
d324 3
a326 2
  CPREC *dtop,*dbot,zlabel,dens_scale[1],rho0;
  static CPREC local_dens_fac = .01;	/* this factor will be multiplied with 
d336 1
a336 2
    for(i=0;i < hc->inho;i++)
      sh_free_expansion((hc->dens_anom+i));
d361 1
a361 1
      MEMERROR("hc_assign_density: dens anom");
d370 13
d389 2
a390 2
      hc->rden=(CPREC *)
	realloc(hc->rden,(1+hc->inho)*sizeof(CPREC));
d392 1
a392 1
	MEMERROR("hc_assign_density: rden");
d409 2
a410 1
		hc->rden[hc->inho],hc->dens_scale[0],local_dens_fac,rho0,dens_scale[0]);
d412 6
a417 3
	/* check by comparison with previous expansion */
	if(lmax != hc->dens_anom[0].lmax)
	  HC_ERROR("hc_assign_density","lmax changed in file");
d421 3
a423 1
      /* make room for new expansion */
d427 1
a427 4
	MEMERROR("hc_assign_density");
      /* initialize */
      sh_init_expansion((hc->dens_anom+hc->inho),lmax,hc->sh_type,1,
			verbose);
d429 8
d438 1
a438 1
	 read parameters and scale (put possible depth dependence here)
d441 3
a443 2
      sh_read_coefficients((hc->dens_anom+hc->inho),1,in,density_in_binary,
			   dens_scale,verbose);
d500 2
a501 1
		i+1,hc->rden[i],hc->dfact[i],sqrt(sh_total_power((hc->dens_anom+i))));
d551 1
a551 1
  CPREC zlabel,vfac[2],t10[2],t11[2];
d597 2
a598 1
	 read in expansions 
d600 1
a600 1
      sh_read_coefficients(hc->pvel,shps,in,pvel_in_binary,
d663 1
a663 1
    hc->lfac[l] = sqrt((CPREC)l * ((CPREC)l + 1.0));
@


1.8
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.7 2004/07/30 23:52:04 becker Exp becker $
d401 1
a401 1
		i+1,hc->rden[i],hc->dfact[i],sqrt(sh_power((hc->dens_anom+i))));
d519 1
a519 1
		lmax,sqrt(sh_power((hc->pvel+0))),sqrt(sh_power((hc->pvel+1))));
@


1.7
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.6 2004/07/02 00:14:44 becker Exp becker $
d138 1
a138 1
  hc->vel_scale = hc->re*PI/180./hc->timesc;
@


1.6
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.5 2004/07/01 01:25:28 becker Exp becker $
d24 1
d163 1
d185 6
a190 4
    hc_dvecrealloc(&hc->rvisc,1,"hc_assign_viscosity");
    hc_dvecrealloc(&hc->visc,1,"hc_assign_viscosity");
    hc->nvis = 0;
    mean = 0.0;
d194 6
a199 5
      if(hc->nvis)
      if(hc->rvisc[hc->nvis] < hc->rvisc[hc->nvis-1]){
	fprintf(stderr,"hc_assign_viscosity: error: radius has to be ascing, entry %i (%g) smaller than last (%g)\n",
		hc->nvis+1,hc->rvisc[hc->nvis],hc->rvisc[hc->nvis-1]);
	exit(-1);
d202 2
a203 2
      hc_dvecrealloc(&hc->rvisc,hc->nvis+1,"hc_assign_viscosity");
      hc_dvecrealloc(&hc->visc,hc->nvis+1,"hc_assign_viscosity");
@


1.5
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.4 2004/06/24 01:02:13 becker Exp becker $
d20 1
a20 1
  (*hc)->r = (*hc)->visc = (*hc)->rv = 
d44 3
a46 3
	     my_boolean compressible,
	     my_boolean free_slip,
	     my_boolean vel_bc_zero,
d48 1
a48 1
	     my_boolean verbose)
d70 1
a70 1
      MY_ERROR("hc_init","vel_bc_zero and free_slip doesn't make sense");
d98 4
a101 1
  hc->save_prop = FALSE;	/* don't save the propagator in hc_polsol */
d111 1
a111 1
		       char *prem_filename,my_boolean verbose)
d113 1
a113 1
  static my_boolean init=FALSE;
d115 1
a115 1
    MY_ERROR("hc_init_constants","why would you call this routine twice?")
d159 1
a159 1
			 my_boolean verbose)
d163 1
a163 1
  static my_boolean init=FALSE;
d172 1
a172 1
      MY_ERROR("hc_assign_viscosity","viscosity already read from file, really read again?");
d182 3
a184 3
    in = myopen(filename,"r","hc_assign_viscosity");
    my_dvecrealloc(&hc->rv,1,"hc_assign_viscosity");
    my_dvecrealloc(&hc->visc,1,"hc_assign_viscosity");
d188 1
a188 1
		 (hc->rv+hc->nvis),(hc->visc+hc->nvis))==2){
d191 1
a191 1
      if(hc->rv[hc->nvis] < hc->rv[hc->nvis-1]){
d193 1
a193 1
		hc->nvis+1,hc->rv[hc->nvis],hc->rv[hc->nvis-1]);
d197 2
a198 2
      my_dvecrealloc(&hc->rv,hc->nvis+1,"hc_assign_viscosity");
      my_dvecrealloc(&hc->visc,hc->nvis+1,"hc_assign_viscosity");
d210 1
a210 1
    MY_ERROR("hc_assign_viscosity","mode undefined");
d237 1
a237 1
		       my_boolean compressible,int mode,
d239 3
a241 3
		       my_boolean layer_structure_changed,
		       my_boolean density_in_binary,
		       my_boolean verbose)
d251 1
a251 1
  static my_boolean init=FALSE;
d260 1
a260 1
    MY_ERROR("hc_assign_density","assign 1-D reference model (PREM) first");
d264 1
a264 1
      MY_ERROR("hc_assign_density","really read dens anomalies again from file?");
d274 1
a274 1
    in = myopen(filename,"r","hc_assign_density");
d295 1
a295 1
	MY_ERROR("hc_assign_density","vector field read in but only scalar expansion expected");
d321 1
a321 1
	  MY_ERROR("hc_assign_density","lmax changed in file");
d323 1
a323 1
	  MY_ERROR("hc_assign_density","depth should decrease, radius increase (give z[km])");
d343 1
a343 1
      MY_ERROR("hc_assign_density","file mode: mismatch in number of layers");
d347 1
a347 1
    MY_ERROR("hc_assign_density","mode undefined");
d357 1
a357 1
    my_vecrealloc(&hc->r,(2+hc->nrad),"hc_assign_density");
d360 1
a360 1
      MY_ERROR("hc_assign_density","first density layer has to be above internal CMD limit");
d364 1
a364 1
      MY_ERROR("hc_assign_density","uppermost density layer has to be below surface");
d375 2
a376 2
    my_vecalloc(&dbot,hc->nrad,"hc_assign_density");
    my_vecalloc(&dtop,hc->nrad,"hc_assign_density");
d389 1
a389 1
    my_dvecrealloc(&hc->dfact,hc->nrad,"hc_assign_density");
d414 1
a414 1
			      my_boolean verbose)
d419 3
a421 3
    MY_ERROR("hc_init_phase_boundaries","phase boundaries not implemented yet");
    my_vecrealloc(&hc->rpb,hc->npb,"hc_init_phase_boundaries");
    my_vecrealloc(&hc->fpb,hc->npb,"hc_init_phase_boundaries");
d440 3
a442 3
				my_boolean vel_bc_zero,int lmax,
				my_boolean pvel_in_binary,
				my_boolean verbose)
d444 1
a444 1
  static my_boolean init = FALSE;
d451 1
a451 1
    MY_ERROR("hc_assign_plate_velocities","what to do if called twice?");
d468 1
a468 1
      in = myopen(filename,"r","hc_assign_plate_velocities");
d517 1
a517 1
      MY_ERROR("hc_assign_plate_velocities","op mode undefined");
d551 2
a552 2
  my_vecrealloc(&hc->lfac,lmaxp1,"hc_init_l_factors");
  my_vecrealloc(&hc->ilfac,lmaxp1,"hc_init_l_factors");
@


1.4
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.3 2004/06/23 01:06:56 becker Exp becker $
d20 2
a21 1
  (*hc)->r = (*hc)->visc = (*hc)->rv = (*hc)->dfact = (*hc)->rden = NULL;
d47 1
d50 1
a50 1

d61 1
a61 1
  hc_init_constants(hc,PREM_MODEL_FILE,verbose);
d67 26
a92 5
  /* 
     initialize density anomalies from file 
  */
  hc_assign_density(hc,compressible,HC_INIT_FROM_FILE,
		    HC_DENS_SH_FILE,FALSE,FALSE,verbose);
d97 1
a97 11
  if(!free_slip){
    /* 
       velocity boundary conditions 
    */
    hc_assign_plate_velocities(hc,HC_INIT_FROM_FILE,
			       HC_PVEL_FILE,vel_bc_zero,
			       FALSE,verbose);
  }else{
    if(verbose)
      fprintf(stderr,"hc_init: initializing for free-slip\n");
  }
d102 4
a105 2
   those numbers might be a bit funny, but leave them like this for
   now for backward compatibility
d107 2
a108 1
void hc_init_constants(struct hcs *hc,char *prem_filename,my_boolean verbose)
d118 4
a121 3
  /* density scale */
  hc->dens_scale = 1.0;

d133 2
d216 4
a219 2
if mode==0: expects spherical harmonics of density anomalies 
            given in SH format on decreasing depth levels in [km]
d242 6
a247 1
  CPREC *dtop,*dbot,dens_scale,zlabel;
d250 1
d255 3
a262 1
    dens_scale = hc->dens_scale;
d265 4
a268 2
    read in density anomalies in spherical harmonics format 
    for different layers from file
d272 3
d302 13
d332 1
a332 1
	 read parameters and scale (put possible depth dependence here
d391 1
a391 1
      for(i=0;i<hc->nrad;i++)
d429 1
d431 1
d437 1
a437 1
				my_boolean vel_bc_zero,
d442 2
a443 2
  int type,lmax,shps,ilayer,nset,ivec;
  CPREC zlabel;
d445 2
a446 7
  /* 
     lmax is at least that of the density anomalies  
  */
  lmax = hc->dens_anom[0].lmax;
  /* do some checks */
  if(!lmax)
    MY_ERROR("hc_assign_plate_velocities","zero lmax of density expansion, init those first");
d459 2
a460 1
	 read velocities in pol/tor expansion format from file
d463 1
a463 1
	fprintf(stderr,"hc_assign_plate_velocities: reading plate velocity expansion from %s\n",
a477 5
      if(lmax < hc->dens_anom[0].lmax){
	fprintf(stderr,"hc_assign_plate_velocities: lmax of plate expansion (%i) smaller than lmax of densities (%i)\n",
		lmax, hc->dens_anom[0].lmax);
	exit(-1);
      }
d491 2
a492 1
      sh_read_coefficients(hc->pvel,shps,in,pvel_in_binary,1.0,verbose);
d494 15
d524 1
a524 1
      sh_init_expansion(hc->pvel,hc->dens_anom[0].lmax,hc->sh_type, 
d526 1
a526 1
      sh_init_expansion((hc->pvel+1),hc->dens_anom[0].lmax,hc->sh_type, 
d535 24
a558 1
  
@


1.3
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.2 2004/06/21 01:16:31 becker Exp becker $
d10 15
d27 1
a27 1
initialize the hc structure 
a47 7
  /* 
     assign NULL pointers to allow reallocating 
  */
  hc->r = hc->visc = hc->rv = hc->dfact = hc->rden = NULL;
  hc->rpb = hc->fpb= NULL;
  hc->dens_anom = hc->geoid = NULL; /* expansions */
  hc->prem_init = FALSE;
d69 1
a69 1
		    HC_DENS_SH_FILE,FALSE,verbose);
d79 2
a80 1
			       HC_PVEL_FILE,vel_bc_zero,verbose);
d102 3
d114 1
a114 1
  hc->avg_den_mantle = 4.4488e3;/* average density in mantle [gg/m^3] */
d209 2
d216 1
d221 1
a221 2
  float zlabel;
  CPREC *dtop,*dbot;
d232 2
d252 2
a253 1
			     &zlabel,&ivec,in,verbose)){
d283 7
a289 2
      /* read parameters */
      sh_read_coefficients((hc->dens_anom+hc->inho),1,in,verbose);
d389 1
d394 1
a394 1
  float zlabel;
d410 1
d422 2
a423 1
			     &zlabel,&ivec,in,verbose)){
d451 1
a451 1
      sh_read_coefficients(hc->pvel,shps,in,verbose);
@


1.2
log
@*** empty log message ***
@
text
@d6 1
a6 1
   $Id: hc_init.c,v 1.1 2004/06/20 23:17:52 becker Exp becker $
a272 9
    if(verbose){
      /* 
	 print the layer depths and RMS
      */
      fprintf(stderr,"hc_assign_density: read %i layers of density anomalies (lmax %i) from file\n",
	      hc->inho, hc->dens_anom[0].lmax);
      for(i=0;i < hc->inho;i++)
	fprintf(stderr,"r: %11g |x|: %11g\n",hc->rden[i],sqrt(sh_power((hc->dens_anom+i))));
    }
d285 1
a285 4
    hc->r=(CPREC *)
      realloc(hc->rden,(2+hc->nrad)*sizeof(CPREC));
    if(!hc->r)
      MEMERROR("hc_assign_density: r");
a293 8
    if(compressible){
      /* 
	 this should read in PREM and prepare the rho_zero 
	 initialization in hc_polsol 
      */
      MY_ERROR("hc_assign_density","compressible not implemented yet");
    }
    
d314 3
d318 1
a318 1
    for(i=0;i<hc->nrad+1;i++){
d323 2
a324 2
	fprintf(stderr,"hc_assign_density: dens %3i: r: %11g df: %11g\n",
		i+1,hc->rden[i],hc->dfact[i]);
d421 1
a421 1
      sh_init_expansion(hc->pvel,lmax,hc->sh_type,1,verbose);
d429 2
a430 2
	fprintf(stderr,"hc_assign_plate_velocities: read plate velocities OK, lmax %i\n",
		lmax);
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
   $Id: hc.c,v 1.1 2004/06/20 18:41:06 becker Exp becker $
d70 1
a70 1
    hc_assing_plate_velocities(hc,HC_INIT_FROM_FILE,
d149 2
a150 2
    my_dverecalloc(&hc->rv,1,"hc_assign_viscosity");
    my_dverecalloc(&hc->visc,1,"hc_assign_viscosity");
d198 1
a198 1
void hc_assign_density(struct *hcs hc,
d205 2
a206 2
  int type,lmax,shps,ilayer,nset,ivec,i;
  float *zlabel;
d213 2
a214 2
      sh_free_expansion((hc->dens_anom+i),0);
  switch(code){
d224 1
a224 1
    in = myopen(filename,"r"."hc_assign_density");
d227 1
a227 1
      reallocate(hc->dens_anom,sizeof(struct lms));
d243 2
a244 2
      hc->rden=(struct CPREC *)
	reallocate(hc->rden,(1+hc->inho)*sizeof(CPREC));
d250 1
a250 1
      hc->rden[hc->inho] = NR_RADIUS(zlabel);
d260 1
a260 1
	reallocate(hc->dens_anom,(1+hc->inho)*sizeof(struct lms));
d264 1
a264 1
      sh_init_expansion((hc->dens_anom+hc->inho),lmax,hc->type,1,
d290 1
a290 1
    assign a the other radii, nrad + 2
d294 2
a295 2
    hc->r=(struct CPREC *)
      reallocate(hc->rden,(2+hc->nrad)*sizeof(CPREC));
d334 1
a334 1
    my_vecdrealloc(&hc->dfact,hc->nrad,"hc_assign_density");
d371 1
a371 1
/* read in plate velocities, 
d373 1
a373 1
mode == 0: read from file
d388 1
a388 1
  float zlable;
d390 3
d394 1
d399 4
d404 47
a450 11
  switch(code){
  case HC_INIT_FROM_FILE:
    if(verbose)
      fprintf(stderr,"hc_assign_plate_velocities: reading plate velocity expansion from %s\n",
	      filename);
    in=myopen(filename,"r","hc_assign_plate_velocities");
    if(!sh_read_parameters(&type,&lmax,&shps,&ilayer, &nset,
			   &zlabel,&ivec,in,verbose)){
      fprintf(stderr,"hc_assign_plate_velocities: read error file %s\n",
	      filename);
      exit(-1);
a451 24
    if(shps != 2){
      fprintf(stderr,"hc_assign_plate_velocities: two sets expected but found shps: %i in file %s\n",
	      shps,filename);
    if(lmax < hc->dens_anom[0].lmax){
      fprintf(stderr,"hc_assign_plate_velocities: lmax of plate expansion (%i) smaller than lmax of densities (%i)\n",
	      lmax, hc->dens_anom[0].lmax);
      exit(-1);
    }
    if((nset > 1)||(fabs(zlabel) > 0.01)){
      fprintf(stderr,"hc_assign_plate_velocities: error: expected one layer at surface, but nset: %i z: %g\n",
	      nset, zlabel);
      exit(-1);
    }
    /* 
       initialize expansion 
    */
    sh_init_expansion(hc->pvel,lmax,hc->type,1,verbose);
    sh_init_expansion((hc->pvel+1),lmax,hc->type,1,verbose);
    /* read in expansions */
    sh_read_coefficients(hc->pvel,shps,in,verbose);
    fclose(in);
    if(verbose)
      fprintf(stderr,"hc_assign_plate_velocities: read plate velocities OK, lmax %i\n",
	      lmax);
d460 1
a460 1
      sh_init_expansion(hc->pvel,hc->dens_anom[0].lmax,hc->type, 
d462 1
a462 1
      sh_init_expansion((hc->pvel+1),hc->dens_anom[0].lmax,hc->type, 
d471 1
@
