head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2006.01.22.01.11.34;	author becker;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.20.05.18.12;	author becker;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.20.05.09.42;	author becker;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.01.01.25.35;	author becker;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.24.02.09.00;	author becker;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.06.00.21.32;	author becker;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include "hc.h"

/* 

read in spherical harmonics coefficients (stdin) and expand to spatial basis (stdout)

Thorsten Becker (twb@@usc.edu)


$Id: sh_syn.c,v 1.5 2004/12/20 05:18:12 becker Exp becker $

*/

int main(int argc, char **argv)
{
  int type,lmax,shps,ilayer,nset,ivec,i;
  hc_boolean verbose = TRUE, short_format = FALSE ,short_format_ivec = FALSE ,binary = FALSE;
  float *data;
  HC_PREC fac[3] = {1.,1.,1.},zlabel;
  double *dbl_dummy;
  struct sh_lms *exp;
  if(argc > 1){
    if((strcmp(argv[1],"-h")==0)||(strcmp(argv[1],"--help")==0)||(strcmp(argv[1],"-help")==0))
      argc = -1000;
    else{
      sscanf(argv[1],"%i",&i);
      if(i)
	short_format = TRUE;
    }
  } 
  if(argc > 2){
    sscanf(argv[1],"%i",&i);
    if(i)
      short_format_ivec = TRUE;
  }
  if((argc > 3)||(argc<0)){
    fprintf(stderr,"usage: %s [short_format, %i] [short_ivec,%i]\n",
	    argv[0],short_format,short_format_ivec);
    exit(-1);
  }
  fprintf(stderr,"%s: waiting to read spherical harmonic coefficients from stdin\n",
	  argv[0]);
  while(sh_read_parameters(&type,&lmax,&shps,&ilayer,&nset,
			   &zlabel,&ivec,stdin,short_format,
			   binary,verbose)){
    if(short_format_ivec){
      ivec = 1;
      shps = 2;
    }
    fprintf(stderr,"%s: converting lmax %i ivec: %i at z: %g\n",
	    argv[0],lmax,ivec,zlabel);

    /* input and init */
    sh_allocate_and_init(&exp,shps,lmax,type,ivec,verbose);
    sh_read_coefficients(exp,shps,-1,stdin,binary,fac,verbose);
    /* expansion */
    hc_svecalloc(&data,exp[0].npoints * shps,"sh_shsyn");
    sh_compute_spatial(exp,ivec,FALSE,&dbl_dummy,data,verbose);
    /* output */
    sh_print_spatial_data(exp,shps,data,(nset>1)?(TRUE):(FALSE),zlabel,stdout);
    free(exp);free(data);
  }

  return 0;
}
@


1.5
log
@*** empty log message ***
@
text
@d13 1
a13 1
$Id: sh_syn.c,v 1.4 2004/12/20 05:09:42 becker Exp becker $
d44 2
@


1.4
log
@*** empty log message ***
@
text
@d13 1
a13 1
$Id: sh_syn.c,v 1.3 2004/12/01 01:25:35 becker Exp becker $
d22 1
a22 1
  HC_CPREC fac[3] = {1.,1.,1.},zlabel;
@


1.3
log
@*** empty log message ***
@
text
@d13 1
a13 1
$Id: sh_syn.c,v 1.2 2004/11/24 02:09:00 becker Exp becker $
d24 1
a24 1
  struct lms *exp;
@


1.2
log
@*** empty log message ***
@
text
@d13 1
a13 1
$Id: sh_syn.c,v 1.1 2004/08/06 00:21:32 becker Exp becker $
d22 1
a22 1
  CPREC fac[3] = {1.,1.,1.},zlabel;
d56 1
a56 1
    sh_read_coefficients(exp,shps,stdin,binary,fac,verbose);
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
$Id: sh_test.c,v 1.3 2004/07/02 00:14:44 becker Exp $
d20 1
a20 1
  hc_boolean verbose = TRUE, short_format = FALSE ,binary = FALSE;
d25 19
a43 3
  

  
d47 7
d55 1
a55 1
    sh_allocate_and_init(&exp,shps,lmax, type,ivec,verbose);
@
