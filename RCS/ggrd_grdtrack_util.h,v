head	1.3;
access;
symbols;
locks
	twb:1.3; strict;
comment	@ * @;


1.3
date	2004.12.20.05.09.57;	author becker;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.03.05.18.42;	author becker;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.03.01.14.39;	author becker;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/* 

header files for modified GMT grd interpolation routines dealing
with grd interpolation

*/

#include <string.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "gmt.h"

struct ggrd_gt{
  /* grd info */
  struct GRD_HEADER *grd;
  struct GMT_EDGEINFO *edgeinfo;
  /* data */
  float *f;
  int mm;
  
  float *z;			/* depth levels */
  int nz;
  unsigned char zlevels_are_negative;

  unsigned char init,is_three;
};

/* 

wrappers

*/
void ggrd_grdtrack_init_general(unsigned char ,char *, char *,char *,
				struct ggrd_gt *,unsigned char );

unsigned char ggrd_grdtrack_interpolate_rtp(double ,double ,double ,
					    struct ggrd_gt *,double *,
					    unsigned char);

void ggrd_grdtrack_free_gstruc(struct ggrd_gt *);

/* 

moderately external

*/
unsigned char ggrd_grdtrack_interpolate(double *, unsigned char , struct GRD_HEADER *, float *,
				  struct GMT_EDGEINFO *, int, float *, int ,	double *,unsigned char);
void ggrd_grdtrack_init(double *, double *,double *, double *, /* geographic bounds,
									   set all to zero to 
									   get the whole range from the
									   input grid files
									*/
			float **,	/* data */
			int *,  /* size of data */
			char *,	/* name, or prefix, of grd file with scalars */
			struct GRD_HEADER **,
			struct GMT_EDGEINFO **,
			char *,unsigned char *,
			int *,	/* [4] array with padding (output) */
			unsigned char _d, char *, 	/* depth file name */
			float **,	/* layers, pass as NULL */
			int *,		/* number of layers */
			unsigned char , /* linear/cubic? */
			unsigned char );

/* 

local 

 */

void ggrd_gt_bcr_init_loc(void);
void ggrd_gt_interpolate_z(double,float *,int ,
			   int *, int *, double *, double *,unsigned char); /*  */
float ggrd_gt_rms(float *,int );



@


1.2
log
@*** empty log message ***
@
text
@a13 72
#ifndef __GGRD_GRDTRACK_HEADER_READ__
#define __GGRD_GRDTRACK_HEADER_READ__


/* 

GMT stuff

*/
#ifndef TRUE 
#define TRUE 1
#endif
#ifndef FALSE
#define FALSE 0
#endif

#ifndef _GMT_H

#define VNULL         ((void *)NULL)
#ifndef irint
#define irint(x) ((int)rint(x))
#endif


struct BCR {	/* Used mostly in gmt_support.c */
	double	nodal_value[4][4];	/* z, dz/dx, dz/dy, d2z/dxdy at 4 corners  */
	double	bcr_basis[4][4];	/* multiply on nodal vals, yields z at point */
	double	bl_basis[4];		/* bilinear basis functions  */
	double	rx_inc;			/* 1.0 / grd.x_inc  */
	double	ry_inc;			/* 1.0 / grd.y_inc  */
	double	offset;			/* 0 or 0.5 for grid or pixel registration  */
/* If we later want to estimate of dz/dx or dz/dy, we will need [4][4] basis for these  */
	int	ij_move[4];		/* add to ij of zero vertex to get other vertex ij  */
	int	i;			/* Location of current nodal_values  */
	int	j;			/* Ditto.   */
	int	bilinear;		/* T/F use bilinear instead of bicubic  */
	int	nan_condition;		/* T/F we cannot evaluate; return z = NaN  */
	int	ioff;			/* Padding on west side of array  */
	int	joff;			/* Padding on north side of array  */
	int	mx;			/* Padded array dimension  */
	int	my;			/* Ditto  */
}bcr;

struct GMT_EDGEINFO {
	/* Description below is the final outcome after parse and verify */
	int	nxp;	/* if X periodic, nxp > 0 is the period in pixels  */
	int	nyp;	/* if Y periodic, nxp > 0 is the period in pixels  */
	int	gn;	/* TRUE if top    edge will be set as N pole  */
	int	gs;	/* TRUE if bottom edge will be set as N pole  */
};

#include "gmt_grd.h"
void *GMT_memory (void *, size_t , size_t , char *);
void GMT_boundcond_set (struct GRD_HEADER *, struct GMT_EDGEINFO *, int *, float *);
void GMT_boundcond_parse (struct GMT_EDGEINFO *, char *);
int GMT_read_grd_info (char *, struct GRD_HEADER *);
int GMT_read_grd (char *, struct GRD_HEADER *, float *, double , double , double , double , 
		  int *, int);
void GMT_boundcond_init (struct GMT_EDGEINFO *);

int GMT_boundcond_param_prep (struct GRD_HEADER *, struct GMT_EDGEINFO *);
void GMT_bcr_init (struct GRD_HEADER *, int *, int );
double GMT_get_bcr_z (struct GRD_HEADER *, double , double , float *,  
		      struct GMT_EDGEINFO *);                /* Compute z(x,y) from bcr structure  */

int GMT_cdf_read_grd(char *, struct GRD_HEADER *, float *, double , double, double, double, int *, int );
int GMT_cdf_read_grd_info(char *, struct GRD_HEADER *);


#endif
/*  */

d36 1
a36 1
				struct ggrd_gt **,unsigned char );
d39 2
a40 1
				      struct ggrd_gt *,double *);
d48 1
a48 1
 */
d50 1
a50 1
				  struct GMT_EDGEINFO *, int, float *, int ,	double *);
d77 1
a77 1
			   int *, int *, double *, double *); /*  */
d80 1
a80 1
#endif
@


1.1
log
@Initial revision
@
text
@d7 6
d14 100
a113 1
#include <string.h>
d117 1
a117 1
external
d120 2
a121 2
BOOLEAN ggrd_grdtrack_interpolate(double *, BOOLEAN , struct GRD_HEADER *, float *,
			 struct GMT_EDGEINFO *, int, float *, int ,	double *);
d132 1
a132 1
			char *,BOOLEAN *,
d134 1
a134 1
			BOOLEAN _d, char *, 	/* depth file name */
d137 2
a138 2
			BOOLEAN , /* linear/cubic? */
			BOOLEAN );
d150 3
@
